Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].


class Solution {
    public int[][] merge(int[][] intervals) {

        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        Stack<int[]> st = new Stack<>();
        st.push(intervals[0]);
        for(int i=1;i<intervals.length;i++){
            if(st.peek()[1]>=intervals[i][0]){
                st.peek()[1]=Math.max(st.peek()[1],intervals[i][1]);
            }else{
                st.push(intervals[i]);
            }

        }

        int ans[][] = new int[st.size()][2];

        for(int i=ans.length-1;i>=0;i--){
            ans[i][0]=st.peek()[0];
            ans[i][1]=st.peek()[1];
            st.pop();
        }
        
        return ans;
    }
}
