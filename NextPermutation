imput = [1,2,3]
output= [1,3,2]

public class Solution 
{
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> nums) 
	{
		 if(nums.size()<=1) return nums;

        int i=nums.size()-2;
        while(i>=0&&nums.get(i)>=nums.get(i+1)) i--;
        if(i>=0){
            int j=nums.size()-1;
            while(nums.get(i)>=nums.get(j)) j--;
            swap(nums,i,j);
        }

        reverse(nums,i+1,nums.size()-1);

		return nums;
	}
	public static void swap(ArrayList<Integer> nums,int i,int j){
    Collections.swap(nums,i,j);
}
public static void reverse(ArrayList<Integer> nums,int i,int j){
    while(i<=j){
        swap(nums,i++,j--);
        
    }
}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
    public void nextPermutation(int[] nums) {

        if(nums.length<=1) return;

        int i=nums.length-2;
        while(i>=0&&nums[i]>=nums[i+1]) i--;
        if(i>=0){
            int j=nums.length-1;
            while(nums[i]>=nums[j]) j--;
            swap(nums,i,j);
        }

        reverse(nums,i+1,nums.length-1);
        
    }
public void swap(int[] nums,int i,int j){
    int temp=nums[i];
    nums[i]=nums[j];
    nums[j]=temp;
}

public void reverse(int nums[],int i,int j){
    while(i<=j){
        swap(nums,i++,j--);
        
    }
    
}
}
